---
title: "Estimating the nursery effect in Inverewe (FW)"
author: "Juliette Archambeau"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    toc: true
    toc-depth: 4
    code-fold: true
    page-layout: full
    number-sections: true
embed-resources: true
bibliography: references.bib
editor_options: 
  chunk_output_type: console
---

<style type="text/css">
body {
   font-size: 15px;
}
code.r{
  font-size: 11px;
}
pre {
  font-size: 11px
}

table {
  font-size: 11px
}
</style>

```{r setup, include=F}
knitr::opts_chunk$set(dev.args = list(png = list(type = "cairo")))
knitr::opts_chunk$set(cache=F)
options(width = 300)
library(knitr)      # CRAN v1.26
library(kableExtra) # CRAN v1.1.0
library(tidyverse)
library(here)
library(magrittr)
library(corrplot)
library(readxl)
library(rstan)
library(tidybayes)
library(bayesplot)
library(parallel)
library(tictoc)
library(latex2exp)

rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())

theme_set(theme_bw(base_size = 20))

# my own function for building tables in reports
source(here("scripts/functions/kable_mydf.R"))
```


For details on the data, see report `ExploringFormattingCGdata.qmd`.

```{r LoadCGData}
data <- readRDS(file=here("data/formatted_CG_data.rds")) %>% 
  filter(FieldSite == "FW")
```

# Mathematical model

We model each trait $y$ such as:

\begin{equation}
\begin{aligned}
y_{bpfnr} & \sim  \mathcal{N}(\mu_{bpfn},\sigma^{2}_{r})\\[3pt]
\mu_{bpc} & =  \beta_{0} +  B_{b} + P_{p} + F_{f} + N_{n} + N_{n}  \times F_{f} \\[3pt]
\beta_{0} & \sim \mathcal{N}(\mu_{y},2)\\[3pt]
\begin{bmatrix} S_{s} \\ B_{b} \\ P_{p} \\ F_{f} \\ N_{n} \\ N_{n} \times F_{f} \end{bmatrix} 
    & \sim \mathcal{N}\left(0,
\begin{bmatrix}
\sigma^{2}_{B}\\[3pt]
\sigma^{2}_{P}\\[3pt]
\sigma^{2}_{F}\\[3pt]
\sigma^{2}_{N}\\[3pt]
\sigma^{2}_{N \times F}\\[3pt]
\end{bmatrix}
\right)\\
\end{aligned}
\end{equation}

$\beta_{0}$ is the global intercept.
$B_{b}$ are the block intercepts with a variance $\sigma^{2}_{B}$.
$P_{p}$ are the population intercepts with a variance $\sigma^{2}_{P}$.
$F_{f}$ are the family intercepts with a variance $\sigma^{2}_{F}$.
$N_{n}$ are the nursery intercepts with a variance $\sigma^{2}_{N}$.
$\sigma^{2}_{N \times F}$ is the variance of the interaction among the nurseries and families.
$\sigma^{2}_{r}$ is the residual variance.


Partitioning of the total variance $\sigma_{tot}^{2}$:

\begin{equation}
\begin{aligned}
\sigma_{tot}^{2} & = \sigma_{r}^{2} + \sigma_{B}^{2} + \sigma_{P}^{2} + \sigma_{F}^{2} + \sigma_{N}^{2} + \sigma_{N \times F}^{2} \\[3pt]
\sigma_{r} & = \sigma_{tot} \times \sqrt(\pi_{r})\\[3pt]
\sigma_{B} & = \sigma_{tot} \times \sqrt(\pi_{B})\\[3pt]
\sigma_{P} & = \sigma_{tot} \times \sqrt(\pi_{P})\\[3pt]
\sigma_{F} & = \sigma_{tot} \times \sqrt(\pi_{F})\\[3pt]
\sigma_{N} & = \sigma_{tot} \times \sqrt(\pi_{N})\\[3pt]
\sigma_{S \times F} & = \sigma_{tot} \times \sqrt(\pi_{N \times F})\\[3pt]
\sigma_{tot} & \sim \mathcal{S}^{*}(0,1,3)
\end{aligned}
\end{equation}

with $\sum_{l}^{6}\pi_{l}=1$.

We also calculate $h^2$ (narrow-sense heritability) and $I$ (evolvability) within the Stan code. For that, we assume that the seedlings from each maternal tree are half-siblings (i.e. same mother but each with a different father) then $\sigma^2_A = 4\sigma^2_{family}$, and so $h^2 = \frac{4\sigma^2_{family}}{\sigma^2_{family} + \sigma^2_{population} + \sigma^2_r}$ and $I = \frac{4\sigma^2_{family}}{\text{mean(y)}^2}$.

Here is the Stan code of the model:

```{r Stancode}
model <- stan_model(here("scripts/stan_models/HMM_FW_NurseryEffect.stan"))
model
```

Options for the Stan models across the document:

```{r ModelOptions}
# Sampling in Bayesian models
n_chains <- 4 # number of chains (MCMC)
n_iter <- 2500 # number of iterations
n_warm <- 1250 # number of iterations in the warm-up phase
n_thin <- 1 # thinning interval
save_warmup <- FALSE 

# Credible intervals
conf_level <- 0.95 # probability level for CI
```



# Applying the model to height in 2016

We run the model for height measurements in 2016.

```{r StanlistHA16}
# Trait measurements in 2016
trait <- "HA16"

subdata <- data %>% 
  dplyr::select(Block,PopulationCode,Family,Nursery,all_of(trait)) %>% 
  mutate(nurs_fam = paste0(Nursery,"_",Family)) %>% 
  drop_na()

# Using compose_data to build the stanlist
# ========================================

subdata <- subdata %>% 
  dplyr::rename(bloc=Block,
                pop=PopulationCode,
                fam=Family,
                nurs=Nursery,
                y=any_of(trait)) 
```

```{r RunningStanModelHA16, eval=F}
stanfit <- sampling(model,
                    data = compose_data(subdata),
                    pars=c("beta0", "pi", "R_squared", "h2","I",
                           "alpha_block","alpha_pop","alpha_fam","alpha_nurs","alpha_nurs_fam",
                           "sigma2_r","sigma2_block","sigma2_pop","sigma2_fam","sigma2_nurs","sigma2_nurs_fam","sigma2_tot"),
                    iter = n_iter, 
                    chains = n_chains, 
                    cores = n_chains,
                    save_warmup = save_warmup,
                    thin=n_thin)

stanfit %>% saveRDS(file=here(paste0("outputs/StanModels/",trait,"_HMM_FW_NurseryEffect.rds")))
```

```{r LoadStanFitHA16}
stanfit <- readRDS(file=here(paste0("outputs/StanModels/",trait,"_HMM_FW_NurseryEffect.rds")))
```


We look at the variance partitioning among the different components.

```{r PlotVarPartHA16, fig.height=7,fig.width=7}
mod_factors <- c("Residuals","Blocks","Populations","Families","Nurseries","Nurseries*Families")

df <- stanfit %>% 
    broom.mixed::tidyMCMC(pars=("pi"),
                robust = T, # median and mean absolute deviation are used to compute point estimates and uncertainty
                ess = F, 
                rhat = F, 
                conf.int = T,
                conf.level = conf_level) %>% 
    mutate(term=mod_factors) %>% 
    mutate(term=factor(term,levels=mod_factors)) 

df %>% kable_mydf

df %>% ggplot(aes(y = term, x = estimate, xmin = conf.low, xmax = conf.high)) +
  geom_pointinterval(position = position_dodge(width = .8), point_size=3, alpha=0.6, size=5) +
  ylab("") +
  xlab("Proportion of variance explained") +
  labs(color = "Potential drivers") +
  theme(axis.text = element_text(size=25),
        panel.grid.minor.y=element_blank(),
        panel.grid.major.y=element_blank())  +
    guides(color=guide_legend(ncol=1))
```

**Narrow-sense heritability and evolvability.** The blue areas corresponds to the 95% credible intervals and the blue lines are the medians.

```{r HeritabilityPosteriorHA16}
stanfit %>% 
  broom.mixed::tidyMCMC(pars=c("h2","I"),
                robust = T, # median and mean absolute deviation are used to compute point estimates and uncertainty
                ess = F, 
                rhat = F, 
                conf.int = T,
                conf.level = conf_level) %>% 
  kable_mydf(round_number = 4)

posterior <- as.matrix(stanfit)

mcmc_areas(posterior,
           pars = c("h2"),
           prob = conf_level,
           point_est = "median",
           prob_outer = 1) 

mcmc_areas(posterior,
           pars = c("I"),
           prob = conf_level,
           point_est = "median",
           prob_outer = 1)
```

Intercepts of the nurseries:

```{r AlphaNurseryPlotsHA16, fig.height=7,fig.width=7, warning=F}
stanfit %<>% recover_types(subdata)

stanfit %>% 
  spread_draws(alpha_nurs[nurs]) %>%
  ggplot(aes(y = nurs, x = alpha_nurs)) +
  stat_halfeye() +
  ylab("") +
  xlab("") +
  labs(color = "Potential drivers") +
  theme(axis.text = element_text(size=25),
        panel.grid.minor.y=element_blank(),
        panel.grid.major.y=element_blank())  +
    guides(color=guide_legend(ncol=1))
```



# Applying the model to height in 2020

We run the model for height measurements in 2020.

```{r StanlistHA20}
# Trait measurements in 2016
trait <- "HA20"

subdata <- data %>% 
  dplyr::select(Block,PopulationCode,Family,Nursery,all_of(trait)) %>% 
  mutate(nurs_fam = paste0(Nursery,"_",Family)) %>% 
  drop_na()

# Using compose_data to build the stanlist
# ========================================

subdata <- subdata %>% 
  dplyr::rename(bloc=Block,
                pop=PopulationCode,
                fam=Family,
                nurs=Nursery,
                y=any_of(trait)) 
```

```{r RunningStanModelHA20, eval=F}
stanfit <- sampling(model,
                    data = compose_data(subdata),
                    pars=c("beta0", "pi", "R_squared", "h2","I",
                           "alpha_block","alpha_pop","alpha_fam","alpha_nurs","alpha_nurs_fam",
                           "sigma2_r","sigma2_block","sigma2_pop","sigma2_fam","sigma2_nurs","sigma2_nurs_fam","sigma2_tot"),
                    iter = n_iter, 
                    chains = n_chains, 
                    cores = n_chains,
                    save_warmup = save_warmup,
                    thin=n_thin)

stanfit %>% saveRDS(file=here(paste0("outputs/StanModels/",trait,"_HMM_FW_NurseryEffect.rds")))
```

```{r LoadStanFitHA20}
stanfit <- readRDS(file=here(paste0("outputs/StanModels/",trait,"_HMM_FW_NurseryEffect.rds")))
```


We look at the variance partitioning among the different components.

```{r PlotVarPartHA20, fig.height=7,fig.width=7}
mod_factors <- c("Residuals","Blocks","Populations","Families","Nurseries","Nurseries*Families")

df <- stanfit %>% 
    broom.mixed::tidyMCMC(pars=("pi"),
                robust = T, # median and mean absolute deviation are used to compute point estimates and uncertainty
                ess = F, 
                rhat = F, 
                conf.int = T,
                conf.level = conf_level) %>% 
    mutate(term=mod_factors) %>% 
    mutate(term=factor(term,levels=mod_factors)) 

df %>% kable_mydf

df %>% ggplot(aes(y = term, x = estimate, xmin = conf.low, xmax = conf.high)) +
  geom_pointinterval(position = position_dodge(width = .8), point_size=3, alpha=0.6, size=5) +
  ylab("") +
  xlab("Proportion of variance explained") +
  labs(color = "Potential drivers") +
  theme(axis.text = element_text(size=25),
        panel.grid.minor.y=element_blank(),
        panel.grid.major.y=element_blank())  +
    guides(color=guide_legend(ncol=1))
```

**Narrow-sense heritability and evolvability.** The blue areas corresponds to the 95% credible intervals and the blue lines are the medians.

```{r HeritabilityPosteriorHA20}
stanfit %>% 
  broom.mixed::tidyMCMC(pars=c("h2","I"),
                robust = T, # median and mean absolute deviation are used to compute point estimates and uncertainty
                ess = F, 
                rhat = F, 
                conf.int = T,
                conf.level = conf_level) %>% 
  kable_mydf(round_number = 4)

posterior <- as.matrix(stanfit)

mcmc_areas(posterior,
           pars = c("h2"),
           prob = conf_level,
           point_est = "median",
           prob_outer = 1) 

mcmc_areas(posterior,
           pars = c("I"),
           prob = conf_level,
           point_est = "median",
           prob_outer = 1)
```

Intercepts of the nurseries:


```{r AlphaNurseryPlotsHA20, fig.height=7,fig.width=7, warning=F}
stanfit %<>% recover_types(subdata)

stanfit %>% 
  spread_draws(alpha_nurs[nurs]) %>%
  ggplot(aes(y = nurs, x = alpha_nurs)) +
  stat_halfeye() +
  ylab("") +
  xlab("") +
  labs(color = "Potential drivers") +
  theme(axis.text = element_text(size=25),
        panel.grid.minor.y=element_blank(),
        panel.grid.major.y=element_blank())  +
    guides(color=guide_legend(ncol=1))
```


