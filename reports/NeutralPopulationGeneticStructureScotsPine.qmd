---
title: "Neutral population genetic structure"
subtitle: "Scots pine"
author: "Juliette Archambeau"
date: "`r format(Sys.time(), '%d %B, %Y')`"
number-sections: true
format: 
  html:
    toc: true
    toc-depth: 4
    code-fold: true
    page-layout: full
embed-resources: true
bibliography: references.bib
editor_options: 
  chunk_output_type: console
---

<style type="text/css">
body {
   font-size: 15px;
}
code.r{
  font-size: 11px;
}
pre {
  font-size: 11px
}

table {
  font-size: 10px
}
</style>

```{r setup, include=FALSE}
knitr::opts_chunk$set(fig.width = 7,fig.height = 5,cache=F)
options(width = 300)
library(knitr)
library(tidyverse)
library(kableExtra)
library(here)
library(vegan) # to run the PCA and the RDA
library(pals) # R color palettes with many data classes

# my own function for building tables in reports
source(here("scripts/functions/kable_mydf.R"))
```

# Individuals allele counts

```{r LoadIndividualAlleleCounts}
# We load the imputed allele counts not filtered for MAF
geno <- readRDS(here("data/ScotsPine/GenomicData/FormattedData/ImputedFilteredGenomicData.rds")) %>% 
  arrange(PopulationCode) # to be sure that colors in the PCA graph are attributed to the right individuals

geno[1:10,1:10] %>% kable_mydf()
```


```{r RunPCAAlleleCounts, fig.height=7, fig.width=7}
# Run the PCA (quite long)
pca <- rda(geno[,-c(1:3)], scale=T)

# Screeplot of the PCA eigenvalues
screeplot(pca, type = "barplot", npcs=10, main="PCA Eigenvalues")

# Add population colors to the genomic dataset
geno_plot <- tibble(PopulationCode = unique(geno$PopulationCode),
                    PopulationColor = cols25(length(unique(geno$PopulationCode)))) %>% 
  right_join(geno, by="PopulationCode") %>% 
  arrange(PopulationCode)

# We plot only the first and second axis
second_axis <- 2

plot(pca, type="n", scaling=3, choices=c(1,second_axis),
     xlab=paste0("PC1 (",round(summary(eigenvals(pca))[2,1]*100,2),"%)"),
     ylab=paste0("PC",second_axis," (",round(summary(eigenvals(pca))[2,second_axis]*100,2),"%)"))
points(pca, display="sites", pch=21, cex=0.9, 
         col=geno_plot$PopulationColor, 
         scaling=3, 
         bg=geno_plot$PopulationColor, choices=c(1,second_axis))
legend("topleft", 
       legend=unique(geno_plot$PopulationCode), 
       bty="n", 
       col=unique(geno_plot$PopulationColor), 
       pch=21, 
       cex=0.9,
       ncol = 3,
       pt.bg=unique(geno_plot$PopulationColor), 
       title="Populations")
```

# Population allele frequencies 

```{r LoadPopulationAlleleFrequencies}
# We load the population allele frequencies not filtered for MAF
geno <- readRDS(here("data/ScotsPine/GenomicData/FormattedData/FilteredGenomicData_PopAlleleFreq.rds")) %>% 
  arrange(PopulationCode)  # to be sure that colors in the PCA graph are attributed to the right individuals
  
geno[1:10,1:10] %>% kable_mydf()
```


```{r RunPCAAlleleFrequencies}
# we run the PCA (quite long)
pca <- rda(geno %>% column_to_rownames("PopulationCode"), scale=T)

# Screeplot of the PCA eigenvalues
screeplot(pca, type = "barplot", npcs=10, main="PCA Eigenvalues")

# Add population colors to the genomic dataset
geno_plot <- tibble(PopulationCode = unique(geno$PopulationCode),
                    PopulationColor = cols25(length(unique(geno$PopulationCode)))) %>% 
  right_join(geno, by="PopulationCode") %>% 
  arrange(PopulationCode)

second_axis <- 2

plot_pca_allele_freq <- function(second_axis){
  
  ordipointlabel(pca, 
                 display="sites", # show population names
                 scaling=3, 
                 pch=21, 
                 cex=1, 
                 xlab=paste0("PC1 (",round(summary(eigenvals(pca))[2,1]*100,2),"%)"),
                 ylab=paste0("PC",second_axis," (",round(summary(eigenvals(pca))[2,second_axis]*100,2),"%)"),
                 col=geno_plot$PopulationColor, 
                 bg=geno_plot$PopulationColor, 
                 choices=c(1,second_axis))
  }

plot_pca_allele_freq(second_axis = 2)
plot_pca_allele_freq(second_axis = 3)
```

