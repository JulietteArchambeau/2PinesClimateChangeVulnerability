---
title: "Explore climatic data"
author: "Juliette Archambeau"
date: "`r format(Sys.time(), '%d %B, %Y')`"
number-sections: true
format: 
  html:
    toc: true
    toc-depth: 4
    code-fold: true
    page-layout: full
embed-resources: true
bibliography: references.bib
editor_options: 
  chunk_output_type: console
---

<style type="text/css">
body {
   font-size: 15px;
}
code.r{
  font-size: 11px;
}
pre {
  font-size: 11px
}

table {
  font-size: 10px
}
</style>

```{css, echo=FALSE}
pre {
  max-height: 150px;
  overflow-y: auto;
  overflow-x: auto;
  font-size: 10px;
}

body{
  font-size: 12px;
}
```

```{r setup, include=FALSE}
knitr::opts_chunk$set(fig.width = 5,fig.height = 4,cache=F)
options(width = 300)
library(knitr)
library(tidyverse)
library(readxl)
library(magrittr)
library(kableExtra)
library(here)
library(sf)
library(raster)
library(ncdf4)


# my own function for building tables in reports
source(here("scripts/functions/kable_mydf.R"))
```



```{r ExtractChessScapeClimData, eval=F}
# Path to chess Scape climatic data
ceda_clim_path <- "data/ScotsPine/Climate/ftp.ceda.ac.uk/badc/deposited2021/chess-scape/data/"

# We extract climatic data:
  # for two RCPs (with or without bias correction)
vec_rcp_scenario <- list.files(here(ceda_clim_path))

  # for four ensemble members
vec_ensemble_member <- list.files(here(paste0(ceda_clim_path,vec_rcp_scenario[[1]])))

  # for three time periods
vec_timeslice <- list(c("1980","2000"),c("2030","2050"),c("2060","2080"))
  
extract_netCDF_data <- function(ceda_clim_path, rcp_scenario, ensemble_member, clim_var, timeslice){
  
# Read netCDF file
nc_file <- paste0(ceda_clim_path,rcp_scenario,"/",ensemble_member,"/timeslice/",clim_var,
                  "/chess-scape_",rcp_scenario,"_",ensemble_member,"_",clim_var,"_uk_1km_timeslice_",timeslice[[1]],"1201-",timeslice[[2]],"1130.nc")

nc_data <- brick(here(nc_file))

# # New names for the layers
# names(nc_data) <- names(nc_data) %>%
#   str_extract("\\.(\\d{2})\\.") %>% # Extract MM part
#   str_replace_all("\\.", "") %>%    # Remove '.' characters
#   str_replace("^", "month_")        # Prepend 'month_'


# I think there is a mistake with the names, the first name should be January month and not September.
# Data are coherent with the names in the order January -> December (and not the current names of the brick)

names(nc_data) <- sprintf("month_%02d", 1:12)

# Read spatial points
points_file <- "data/ScotsPine/population_coordinates.csv"
points_data <- read_csv(here(points_file))

# Define function to transform coordinates from WGS84 to OSGB
transform_coordinates <- function(lon, lat) {
  # Create spatial points object
  points <- st_as_sf(data.frame(lon = lon, lat = lat), coords = c("lon", "lat"), crs = 4326)
  
 # Transform to OSGB projection (EPSG:27700)
  points_transformed <- st_transform(points, crs = 27700)
  
  return(points_transformed)
}

# Transform spatial points to OSGB projection
points_sf <- transform_coordinates(points_data$Longitude, points_data$Latitude)

# Extract climatic data at spatial points
extracted_data <- raster::extract(nc_data, as.matrix(st_coordinates(points_sf))) %>%
  as_tibble() %>% 
  mutate(seas_djf = rowMeans(dplyr::select(.,month_12,month_01,month_02)),
         seas_mam = rowMeans(dplyr::select(.,month_03,month_04,month_05)),
         seas_jja = rowMeans(dplyr::select(.,month_06,month_07,month_08)),
         seas_son = rowMeans(dplyr::select(.,month_09,month_10,month_11)),
         annual = rowMeans(.))
  

# Combine extracted data with original points data
points_data <- points_data %>%
  bind_cols(extracted_data) %>% 
  mutate(clim_var=clim_var,
         ensemble_member = ensemble_member,
         rcp_scenario = rcp_scenario,
         timeslice = paste0(timeslice[[1]],"_",timeslice[[2]]))

return(points_data)
}


climdf <- lapply(vec_rcp_scenario, function(rcp_scenario){
  
  lapply(vec_ensemble_member, function(ensemble_member){
    
    vec_clim_var <- list.files(here(paste0(ceda_clim_path,rcp_scenario,"/",ensemble_member,"/timeslice")))
    
    lapply(vec_clim_var, function(clim_var){
      
      lapply(vec_timeslice, function(timeslice){
        
        extract_netCDF_data(ceda_clim_path, rcp_scenario,ensemble_member,clim_var,timeslice)
        
      }) %>% bind_rows()
    }) %>% bind_rows()
  }) %>% bind_rows()
}) %>% bind_rows()

saveRDS(climdf, file=here("data/ScotsPine/Climate/climdf.rds"))
saveRDS(climdf, file=here("shinny/VizClimateDifferencesScotsPine/climdf.rds"))
```


```{r LoadClimdf}
climdf <- readRDS(here("data/ScotsPine/Climate/climdf.rds"))
```

The differences between current and future climates at the location of the populations can be visualized with the following shinny app : <https://juliettearchambeau.shinyapps.io/VizClimateDifferencesScotsPine/>.

We want to identify the climatic variable that will change the most under climate change. 

```{r CalculateClimDifferencesBtwCurrentFutureClimates}
climdiff <- climdf %>% 
  pivot_longer(names_to = "time_averages", values_to = "value",cols=contains(c("month","seas","annual"))) %>% 
  pivot_wider(names_from = timeslice, values_from = value, names_prefix = "timeslice_") %>% 
  mutate(abs_diff = timeslice_2060_2080 - timeslice_1980_2000,
         rel_diff = (timeslice_2060_2080 - timeslice_1980_2000) * 100 / timeslice_2060_2080) %>% 
  arrange(desc(abs(rel_diff)))

climdiff %>% dplyr::filter(rcp_scenario %in% c("rcp26","rcp85")) %>% slice(1:30) %>%  kable_mydf()
```

Comments on the variables from <https://vocab.nerc.ac.uk/standard_name/>: 

  - 'pr' "Precipitation" in the earth's atmosphere means precipitation of water in all phases. In accordance with common usage in geophysical disciplines, "flux" implies per unit area, called "flux density" in physics.
  
  
```{r}
# Figure options
axis_text_size <- 14
axis_title_size <- 17
legend_text_size <- 14 
legend_title_size <- 17
bg_color <- "gray44"


df <- climdf %>% 
  pivot_longer(names_to = "time_averages", values_to = "value",cols=contains(c("month","seas","annual")))


# UI
ui <- fluidPage(
  titlePanel("Differences between current and future climates at the location of the populations"),
  sidebarLayout(
    sidebarPanel(
      width = 3, # Adjust the width here
      selectInput("time_averages", "Time averages:", choices = unique(df$time_averages)),
      selectInput("clim_var", "Climatic variable:", choices = unique(df$clim_var)),
      selectInput("ensemble_member", "Ensemble member:", choices = unique(df$ensemble_member)),
      selectInput("rcp_scenario", "RCP scenario:", choices = unique(df$rcp_scenario)),
      selectInput("time_slice", "Timeslice (for the map):", choices = unique(df$timeslice))
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("Population climates", 
                 plotOutput("climatic_plot")),
        tabPanel("Relative climatic differences",
                 div(style = "margin-top: 20px;",
                     withMathJax(uiOutput("climatic_diff_text"))),
                     #textOutput("climatic_diff_text")),
                 div(style = "margin-top: 20px;",
                 plotOutput("relative_climatic_differences_plot")))
      )
    )
  ),
  fluidRow(
    column(6,
           div(style = "margin-top: 60px;",tableOutput("variable_info_table"))
    ),
    column(6,
           plotOutput("map_plot", height = "600px")  # Adjust height of the map as needed
    )
  )
)


# Server
server <- function(input, output) {
  output$climatic_plot <- renderPlot({
    filtered_data <- df %>%
      filter(time_averages == input$time_averages &
               clim_var == input$clim_var &
               ensemble_member == input$ensemble_member &
               rcp_scenario == input$rcp_scenario)
    
    # Filter the data based on selected clim_var and calculate y-axis limits
    filtered_clim_var_data <- df %>%
      filter(clim_var == input$clim_var)
    
    y_limits <- range(filtered_clim_var_data$value)
    
    ggplot(filtered_data, aes(x = PopulationCode, y = value, group = timeslice, color = timeslice)) +
      geom_point(size=4) +
      labs(x = "Populations", y = "Climatic Value", #title = "Climatic Differences Across Time Periods",
           color = "Time slices") +  # Changed legend title
      scale_color_manual(values = c("1980_2000" = "darkgoldenrod1", "2030_2050" = "chocolate1", "2060_2080" = "brown4")) +  # Changed colors
      theme_bw() +
      theme(axis.text = element_text(size=axis_text_size),
            axis.title = element_text(size=axis_title_size),
            legend.text = element_text(size=legend_text_size),
            legend.title = element_text(size=legend_title_size)) +
      ylim(y_limits)  # Set y-axis limits
  })
  


  output$variable_info_table <- renderTable({
    variable_info
  })
  
  # Render map plot
  output$map_plot <- renderPlot({
    mapdf <- df %>% 
      filter(time_averages == input$time_averages &
             clim_var == input$clim_var &
             ensemble_member == input$ensemble_member &
             rcp_scenario == input$rcp_scenario,
             timeslice == input$time_slice) %>% 
      arrange(PopulationCode)
    
    point_size=4
    x_limits = c(-7, -1)
    y_limits = c(55.5, 59)
    legend_position = c(0.85,0.8)
    legend_box_background = "gray80"
    
    p <- ggplot() + 
      geom_sf(data = world, fill="gray98") + 
      theme_bw() +
      scale_x_continuous(limits = x_limits) +
      scale_y_continuous(limits = y_limits) + 
      geom_point(data=mapdf, aes(x=Longitude,y=Latitude,color=value), size=point_size) + 
      geom_point(data=site_coord, aes(x=Longitude,y=Latitude), 
                 size=5, color="black", shape=8) +
      
      xlab("") + ylab("") +
      #ggtitle(ggtitle) +
      theme(legend.position = legend_position,
            legend.box.background = element_rect(colour = legend_box_background))  +
      scale_color_gradientn(name = "Climatic value", colours = rev(rainbow(5)), limits=NULL)
    
      coords <- site_coord %>% 
        mutate(ID = paste0(FieldSite, " (", FieldSiteName,")")) %>% 
        dplyr::select(ID, contains("ude"))
      
      coords <- mapdf %>% 
        mutate(ID = PopulationCode) %>% 
        dplyr::select(ID, contains("ude")) %>% 
        bind_rows(coords) %>%  
        st_as_sf(coords = c("Longitude","Latitude"), crs =4326)
      
      nudges <- data.frame(ID=coords$ID,
                           nudge_x = rep(0.1,nrow(coords)),
                           nudge_y = rep(0.1, nrow(coords)))
      
      nudges[nudges$ID=="FS (Yair)",2:3] <- c(0,0.15)  
      nudges[nudges$ID=="FE (Glensaugh)",2:3] <- c(0.2,-0.15)  
      nudges[nudges$ID=="FW (Inverewe)",2:3] <- c(-0.25,0.15)  
      
      nudges[nudges$ID=="CC",2:3] <- c(-0.02,-0.09)  
      nudges[nudges$ID=="CG",2:3] <- c(-0.06,0.09)
      nudges[nudges$ID=="GL",2:3] <- c(0.06,0.09)
      
      nudges[nudges$ID=="CR",2:3] <- c(-0.06,0.09)
      nudges[nudges$ID=="MG",2:3] <- c(0.06,-0.09)
      nudges[nudges$ID=="BW",2:3] <- c(0.06,0.09)
      
      nudges[nudges$ID=="GT",2:3] <- c(0.06,0.09)
      nudges[nudges$ID=="BB",2:3] <- c(0.06,-0.09)
      nudges[nudges$ID=="AC",2:3] <- c(0.06,0.09)
      nudges[nudges$ID=="GD",2:3] <- c(-0.1,-0.08)
      nudges[nudges$ID=="RM",2:3] <- c(-0.23,0)
      nudges[nudges$ID=="AB",2:3] <- c(0.06,0.09)
      
      nudges[nudges$ID=="GA",2:3] <- c(0.15,-0.07)
      nudges[nudges$ID=="GC",2:3] <- c(0.06,0.09)
      
      nudges[nudges$ID=="SD",2:3] <- c(-0.15,-0.07)
      nudges[nudges$ID=="LC",2:3] <- c(0.07,-0.08)
      nudges[nudges$ID=="BE",2:3] <- c(0.12,0.08)
      
      
      nudges[nudges$ID=="AM",2:3] <- c(0.1,-0.07)
      nudges[nudges$ID=="RD",2:3] <- c(-0.03,-0.08)
      nudges[nudges$ID=="SO",2:3] <- c(0.08,0.08)
      nudges[nudges$ID=="GE",2:3] <- c(-0.12,0.08)
      
      
      p + geom_sf_text(data = coords, aes(label = ID),
                            nudge_x = nudges$nudge_x,
                            nudge_y = nudges$nudge_y)

  })
  
    # Calculate relative climatic differences
  climdiff <- df %>% 
    pivot_wider(names_from = timeslice, values_from = value, names_prefix = "timeslice_") %>% 
    mutate(abs_diff = timeslice_2060_2080 - timeslice_1980_2000,
           rel_diff = (timeslice_2060_2080 - timeslice_1980_2000) * 100 / timeslice_2060_2080) #%>% 
    #dplyr::filter(rcp_scenario %in% c("rcp26","rcp85"))
  
    
  
  output$climatic_diff_text <- renderUI({
    withMathJax(helpText(
    "The graph below shows the relative difference (\\(RD\\)) in climatic values between the periods of 1980-2000 and 2060-2080, calculated as follows:

   $$RD = \\frac{(x_{1980-2000} - x_{2060-2080}) \\times 100}{x_{1980-2000}}$$

    Please select the time averages from the side bar panel."))
  })
  
  
  # Render relative climatic differences plot
  output$relative_climatic_differences_plot <- renderPlot({
    filtered_data <- climdiff %>%
      filter(time_averages == input$time_averages)
    

 ggplot(filtered_data, aes(x = clim_var, y = rel_diff, color = rcp_scenario)) +
    geom_hline(yintercept = 0, color = bg_color) +
    geom_point(alpha = 0.4,position = position_jitterdodge(jitter.width = 0.1, dodge.width = 0.75), size = 3) +
    labs(x = "Climatic variables", y = "Relative Climatic Difference (%)", color = "RCP scenario") +
    theme_bw() +
    theme(axis.text = element_text(size = axis_text_size),
          axis.title = element_text(size = axis_title_size),
          legend.text = element_text(size = legend_text_size),
          legend.title = element_text(size = legend_title_size))
 


    
  })
  

}

shinyApp(ui = ui, server = server)
```



