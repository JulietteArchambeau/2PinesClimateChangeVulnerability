data {
  int<lower=1> n;                                                               // Number of observations
  vector[n] y;                                                                  // Response variable
  int<lower=0> n_site;                                                          // Number of sites
  int<lower=0> n_bloc;                                                          // Number of blocks
  int<lower=0> n_pop;                                                           // Number of populations
  int<lower=0> n_fam;                                                           // Number of families
  int<lower=0> n_site_fam;                                                      // Number of sites x families
  int<lower=0, upper=n_site> site[n];                                           // Sites
  int<lower=0, upper=n_bloc> bloc[n];                                           // Blocks
  int<lower=0, upper=n_pop> pop[n];                                             // Populations
  int<lower=0, upper=n_fam> fam[n];                                             // Families
  int<lower=0, upper=n_site_fam> site_fam[n];                                   // Sites * families
  int<lower=0, upper=n_pop> which_pop[n_site_fam];                            // Populations of the site*families
}


parameters {
  real beta0; // global intercept
  simplex[6] pi;
  real<lower = 0> sigma_tot;
  real<lower = 0> sigma_K;
  vector[n_pop] z_log_sigma_site_fam;
  
  vector[n_site] z_site;
  vector[n_bloc] z_block;
  vector[n_pop] z_pop;
  vector[n_fam] z_fam;
  vector[n_site_fam] z_site_fam;
  
}


transformed parameters {
  real R_squared;
  
  real<lower = 0>  sigma_r;
  real<lower = 0>  sigma_site;
  real<lower = 0>  sigma_block;
  real<lower = 0>  sigma_pop;
  real<lower = 0>  sigma_fam;
  
  real mean_sigma_site_fam;
  vector[n_pop] sigma_site_fam;
  
  vector[n_site] alpha_site;
  vector[n_bloc] alpha_block;
  vector[n_pop] alpha_pop;
  vector[n_fam] alpha_fam;
  vector[n_site_fam] alpha_site_fam;
  
  vector[n] mu; // linear predictor
  
  //vector[n_pop] pop_var_alpha_site_fam; // Variance of population-specific `site*nursery` intercepts
  
  
  // variance partitioning with the simplex pi
  sigma_r = sqrt(pi[1]) * sigma_tot;
  sigma_site = sqrt(pi[2]) * sigma_tot;
  sigma_block = sqrt(pi[3]) * sigma_tot;
  sigma_pop = sqrt(pi[4]) * sigma_tot;
  sigma_fam= sqrt(pi[5]) * sigma_tot;
  
  mean_sigma_site_fam= sqrt(pi[6]) * sigma_tot;
  sigma_site_fam = exp(log(mean_sigma_site_fam) - (square(sigma_K)/2) + z_log_sigma_site_fam*sigma_K);

  alpha_site = z_site*sigma_site;
  alpha_block = z_block*sigma_block;
  alpha_pop = z_pop*sigma_pop;
  alpha_fam = z_fam*sigma_fam;
  
  for(i in 1:n_site_fam){
    alpha_site_fam[i] =  z_site_fam[i]*sigma_site_fam[which_pop[i]];
  }
  
  mu = rep_vector(beta0, n) + alpha_site[site] + alpha_block[bloc] + alpha_pop[pop] + alpha_fam[fam] + alpha_site_fam[site_fam];
  R_squared = 1 - variance(y - mu) / variance(y);
}

model{
  //Priors
  beta0 ~ normal(mean(y),20);
  sigma_tot ~ student_t(3, 0.0, 1.0);
  
  z_site ~ std_normal();
  z_block ~ std_normal();
  z_pop ~ std_normal();
  z_fam ~ std_normal();
  z_site_fam ~ std_normal();
  
  z_log_sigma_site_fam ~ std_normal();
  sigma_K ~ exponential(1);
  
  // Likelihood
  y ~ normal(mu, sigma_r);
}


generated quantities {
  //Variances
  real<lower=0> sigma2_tot;
  real<lower=0> sigma2_r;
  real<lower=0> sigma2_site;
  real<lower=0> sigma2_block;
  real<lower=0> sigma2_pop;
  real<lower=0> sigma2_fam;
  vector[n_pop] sigma2_site_fam;
  
  sigma2_tot = square(sigma_tot);
  sigma2_r = square(sigma_r);
  sigma2_site = square(sigma_site);
  sigma2_block = square(sigma_block);
  sigma2_pop = square(sigma_pop);
  sigma2_fam = square(sigma_fam);
  sigma2_site_fam = square(sigma_site_fam);

}

