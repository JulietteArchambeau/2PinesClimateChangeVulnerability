data {
  int<lower=1> n;                                                               // Number of observations
  vector[n] y;                                                                  // Response variable
  int<lower=0> n_bloc;                                                          // Number of blocks
  int<lower=0> n_pop;                                                           // Number of populations
  int<lower=0> n_fam;                                                           // Number of families
  int<lower=0> n_sitenurs;                                                      // Number of combinations site-nursery
  int<lower=0> n_sitenurs_fam;                                                  // Number of combinations site-nursery x families
  int<lower=0, upper=n_bloc> bloc[n];                                           // Blocks
  int<lower=0, upper=n_pop> pop[n];                                             // Populations
  int<lower=0, upper=n_fam> fam[n];                                             // Families
  int<lower=0, upper=n_sitenurs> sitenurs[n];                                   // Combinations site-nursery
  int<lower=0, upper=n_sitenurs_fam> sitenurs_fam[n];                           // Combinations site-nursery * families
}


parameters {
  real beta0; // global intercept
  simplex[6] pi;
  real<lower = 0> sigma_tot;
  
 vector[n_bloc] z_block;
  vector[n_pop] z_pop;
  vector[n_fam] z_fam;
  vector[n_sitenurs] z_sitenurs;
  vector[n_sitenurs_fam] z_sitenurs_fam;
  
}


transformed parameters {
  real R_squared;
  
  real<lower = 0>  sigma_r;
  real<lower = 0>  sigma_block;
  real<lower = 0>  sigma_pop;
  real<lower = 0>  sigma_fam;
  real<lower = 0>  sigma_sitenurs_fam;
  real<lower = 0>  sigma_sitenurs;
  
  vector[n_bloc] alpha_block;
  vector[n_pop] alpha_pop;
  vector[n_fam] alpha_fam;
  vector[n_sitenurs] alpha_sitenurs;
  vector[n_sitenurs_fam] alpha_sitenurs_fam;
  
  vector[n] mu; // linear predictor
  
  // variance partitioning with the simplex pi
  sigma_r = sqrt(pi[1]) * sigma_tot;
  sigma_block = sqrt(pi[2]) * sigma_tot;
  sigma_pop = sqrt(pi[3]) * sigma_tot;
  sigma_fam= sqrt(pi[4]) * sigma_tot;
  sigma_sitenurs= sqrt(pi[5]) * sigma_tot;
  sigma_sitenurs_fam= sqrt(pi[6]) * sigma_tot;
  
  alpha_block = z_block*sigma_block;
  alpha_pop = z_pop*sigma_pop;
  alpha_fam = z_fam*sigma_fam;
  alpha_sitenurs = z_sitenurs*sigma_sitenurs;
  alpha_sitenurs_fam = z_sitenurs_fam*sigma_sitenurs_fam;
  
  
  mu = rep_vector(beta0, n) + alpha_block[bloc] + alpha_pop[pop] + alpha_fam[fam] + alpha_sitenurs_fam[sitenurs_fam] + alpha_sitenurs[sitenurs];
  R_squared = 1 - variance(y - mu) / variance(y);
}

model{
  //Priors
  beta0 ~ normal(mean(y),20);
  sigma_tot ~ student_t(3, 0.0, 1.0);
  
  z_block ~ std_normal();
  z_pop ~ std_normal();
  z_fam ~ std_normal();
  z_sitenurs_fam ~ std_normal();
  z_sitenurs ~ std_normal();
  
  // Likelihood
  y ~ normal(mu, sigma_r);
}


generated quantities {
  //Variances, narrow-sense heritability and evolvability
  real<lower=0> sigma2_tot;
  real<lower=0> sigma2_r;
  real<lower=0> sigma2_block;
  real<lower=0> sigma2_pop;
  real<lower=0> sigma2_fam;
  real<lower=0> sigma2_sitenurs;
  real<lower=0> sigma2_sitenurs_fam;
  real<lower=0> h2; // narrow-sense heritability
  real<lower=0> I; // evolvability
  
  sigma2_tot = square(sigma_tot);
  sigma2_r = square(sigma_r);
  sigma2_block = square(sigma_block);
  sigma2_pop = square(sigma_pop);
  sigma2_fam = square(sigma_fam);
  sigma2_sitenurs_fam = square(sigma_sitenurs_fam);
  sigma2_sitenurs = square(sigma_sitenurs);
  h2 = sigma2_fam/(sigma2_r+sigma2_fam);
  I = sigma2_fam/(mean(y)^2);
  
}

